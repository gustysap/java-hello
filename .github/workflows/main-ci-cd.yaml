name: Release - Test, Build & Redeploy

on:
  push:
    branches:
      - 'sandbox'

jobs:
  test:
    name: JUnit Test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Maven Test
        run: mvn clean test

  build:
    name: Maven Build Package and Build Image Docker on Remote Server
    runs-on: ubuntu-latest
    needs: [test]
    env: 
      APPLICATION_NAME: sandbox-alami
      VERSION: latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: maven build package
        run: mvn clean compile vertx:package
      - name: copy jar file and dockerfile to remote server
        uses: appleboy/scp-action@master
        with:
          source: "target/*.jar, Dockerfile"
          target: "hello-project"
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SSH_IP_PUBLIC }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Docker Build
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SSH_IP_PUBLIC }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: "sudo docker build -t ${{ env.APPLICATION_NAME }}:${{ env.VERSION }} hello-project/. "

  deploy:
    name: Deploy docker to server
    runs-on: ubuntu-latest
    needs: [test, build]
    env:
      APPLICATION_NAME: sandbox-alami
      INTERNAL_PORT: 8888
      PUBLISHED_PORT: 8888
#     VERSION: ${GITHUB_SHA::6}
      VERSION: latest
    steps:
      - name: Deploy docker
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USERNAME }}
          host: ${{ secrets.SSH_IP_PUBLIC }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo ${{ env.VERSION }}
            if [ $(docker ps | grep ${{ env.APPLICATION_NAME }} | wc -l) -eq 1 ]; then docker rm -f ${{ env.APPLICATION_NAME }}; sleep 10; sudo docker run -d --restart always --name ${{ env.APPLICATION_NAME }} -p ${{ env.PUBLISHED_PORT }}:${{ env.INTERNAL_PORT }} ${{ env.APPLICATION_NAME }}:${{ env.VERSION }}; else sudo docker run -d --restart always --name ${{ env.APPLICATION_NAME }} -p ${{ env.PUBLISHED_PORT }}:${{ env.INTERNAL_PORT }} ${{ env.APPLICATION_NAME }}:${{ env.VERSION }}; fi
